

Technology and Infrastructure

Overview:

The technology behind our travel application is the MEAN stack.
Nodejs is the core of this webstack as it acts as the webserver. It will be serving our client application, handling authentication via middleware, handling any socket connections for chat and also act as an API end point whilst interacting with the database.
Express is the main webserver framework that we have chosen to use. It was choosen due to its ease in creating API's and the huge community that supports it.
The database in this stack is Mongodb, a document based storage system. Despite mongodb being at core a non relation database, we will be using mongoose a mongodb driver, that adds relationships throughout the documents. This will greatly simplify both the queries to the database and the way the data is stored.
Angular will be served to our client's.

Data Design:
As mentioned previously Mongodb will be our datastore, whilst using mongoose as the database driver. This allows us to declare database schemas that enforce serverside data validation. It also allows our documents to have relationships rather than just being embedded documents. This move away from embedded documents, helps greatly with having concurrent data across users, whilst retaining the benefits of having a document data store. 

Schema Design's:

UserSchema
{
  _id: {
    type: //special id type
    required:true
  },
  username: {
    type: String,
    required: true
    unique: true
  },
  email: {
    type: String
  },
  //The password will not be stored as a
  //plain text password but will be hashed
  password: {
    type: String
    required: true
  }
}

GroupSchema
{
  _id: {
    type: //special id type
    required:true
  },
  name: {
    type:String,
    required: true
  },
  users: [
    {
    UserObject._id
    }
  ],
  destinations : [
    {
      DestinationObject._id
    }
  ],
  chat:{
    ChatObject._id
  },

  // Expenses are in the global schema suggesting
  //global throughout the trip and not dependent
  // on destination. Could change
  Expenses: {
    ExpensesObject._id
  }
}


DestinationSchema
{
  name: {
    type:String,
    required:true
  },
  flights: [
    {
      flightObject._id
    }
  ],
  hotels: [
    {
      hotelObject._id
    }
  ],
  itenary:[
    {
    itenaryObject._id
    }
  ]
  
}


ChatSchema
{
  messages: [
    {
    messageObject._id
    }
  ]
}

FlightSchema
{
  {
  _id:
  user:
  Rome2Rio Object }
}


API END POINTS

/api
{
  "GET /xyz" :{
    "desc": "returns all xyz objects",
    "response": "200 aplication/json",
    "data": [{},{},..]
  },
  "POST /xyz":{
    "desc":"creates and returns a new xyz object",
    "response":"201 application/json",
    "data":{}
  },
  "PUT /xyz/:id":{
    "desc":"updates and returns the matching xyz object",
    "response":"200 application/json",
    "data": {}
  },
  "DELETE /xyz/:id":{
    "desc":"deletes and returns the matching xyz object",
    "response":"200 application/json"
    "data":{}
  }
}


/api
{
  "GET /me":{
   "desc": "sends jwt in the header and returns their username",
   "response": "200 aplication/json",
   "data": {username}
  },


  "GET /groups/:id" :{
    "desc": "returns the matching group, with the id",
    "response": "200 aplication/json"
    "data": {GroupSchema}
  },

  group/:id/users
  group/:id/users/:id

  /destinations
  /destinations/:id
  /destinations/:id/flights
  /destinations/:id/flights/:id
  /destinations/:id/hotels
  /destinations/:id/hotels/:id
  /destinations/:id/itenary
  /destinations/:id/itenary/:id
  /chat
  /expenses
  /expenses/:id
}










